# productive environment with supervisor and ZEO
# TODO: nginx, varnish, etc.

[buildout]
extends =
    base.cfg

parts +=
    supervisor
    zeoserver
    client1 client2
    chown-zeo


[supervisor]
# starten:  bin/supervisord
# kontrollieren:  bin/supervisorctl
recipe = collective.recipe.supervisor
port = 8083
user = admin
password = GuckDrauf-4
programs =
    10 instance (autostart=true autorestart=true startsecs=10) ${buildout:bin-directory}/instance [console] ${instance:location}


############################################
# Ports
# -----
# Specify the ports on which your Zope installation will listen.
# ZEO Server
zeo-address = 127.0.0.1:8082
# Zope client 1
http-address = 8080
# Additional clients:
client2-address = 8081
############################################

# If you try to start Zope as root, it will change user id to run as
# the effective user specified here. This user id must own the var directory
# of your buildout.
# effective-user = zope
# TODO: Brauchen wir den effective-user ?

[zeoserver]
# Use this section to install and configure a Zope
# Enterprise Objects server.
# For options see http://pypi.python.org/pypi/plone.recipe.zeoserver
recipe = plone.recipe.zeoserver
zeo-address = ${buildout:zeo-address}
# if we try to start as root, Zope will switch to the user below
# effective-user = ${buildout:effective-user}
# Put the log, pid and socket files in var/zeoserver
zeo-log     = ${buildout:directory}/var/zeoserver/zeoserver.log
pid-file    = ${buildout:directory}/var/zeoserver/zeoserver.pid
socket-name = ${buildout:directory}/var/zeoserver/zeo.zdsock
# blob-storage = ${buildout:directory}/var/blobstorage # hier default-Wert. Dieser ist verschieden, je nachdem, ob shared-blob. siehe http://pypi.python.org/pypi/plone.recipe.zope2instance


[chown-zeo]
# This recipe is used to set permissions for root mode installs
# For options see http://pypi.python.org/pypi/plone.recipe.command
recipe = plone.recipe.command
command =echo Dummy references to force this to execute after referenced parts
    echo ${backup:location} ${unifiedinstaller:sudo-command}
    chmod 600 .installed.cfg
    touch ${buildout:directory}/var/zeoserver/zeoserver.log
    find ${buildout:directory}/var -type d -exec chmod 700 {} \;
    chmod 744 ${buildout:directory}/bin/*
update-command = ${chown-zeo:command}



[client1]
recipe = plone.recipe.zope2instance
zeo-client = true
zeo-address = ${zeoserver:zeo-address}
# If you find yourself locked out of your Zope/Python installation, you may
# add an emergency user via "bin/plonectl adduser".
user = ${buildout:user}
# effective-user = ${buildout:effective-user}
http-address = ${buildout:http-address}
# webdav-address = 9590
zodb-cache-size = 5000
# TODO: size of blobstorage setzen
zeo-client-cache-size = 1000MB
zeo-client-blob-cache-size = 1000MB
shared-blob = on # ******
blob-storage = ${zeoserver:blob-storage}
debug-mode = off
verbose-security = off
deprecation-warnings = off
# Put the log, pid, lock files in var/client1
event-log = ${buildout:directory}/var/client1/event.log
z2-log    = ${buildout:directory}/var/client1/Z2.log
pid-file  = ${buildout:directory}/var/client1/client1.pid
lock-file = ${buildout:directory}/var/client1/client1.lock

eggs =
    ${buildout:eggs}
zcml = 
    ${buildout:zcml}
develop = 
    ${buildout:develop}
products =
    ${buildout:directory}/products
# You may also control the environment variables for the instance.
environment-vars =
    PYTHON_EGG_CACHE ${buildout:directory}/var/.python-eggs
    zope_i18n_compile_mo_files true
    PYTHONHASHSEED random
zope-conf-additional =
    locale de_CH.UTF-8


[client2]
# a copy of client1, except adjusted address and var location
<= client1
http-address = ${buildout:client2-address}
event-log = ${buildout:directory}/var/client2/event.log
z2-log    = ${buildout:directory}/var/client2/Z2.log
pid-file  = ${buildout:directory}/var/client2/client2.pid
lock-file = ${buildout:directory}/var/client2/client2.lock

